###Cloudstack架构技术
- **ES-Cloud-management为java单进程**
- **Ioc的实现是使用非开源的实现，类似spring的IOC功能**
- **AOP：使用cglib实现**
- **ORM：非开源实现**




###CloudStack模块
+ Services:实现了cloudstack 所有HTTP API
+ Management:
 - 封装了大部分的业务逻辑
 - 与Adapter交互实现定制化功能
+ Resources:封装了cloudstack对底层物理资源的大部分的调用
+ Data Access:封装了数据访问逻辑



###Adapter
- Adapter framework
- 模块化、可扩展、可替换


###实体类的定义
- Components-premium.xml:各种实体类的配置
 - Components.xml：Server、Adaptor、DAO、Interceptor等



###系统初始化
- ComponentLocator.java
 - 读取配置文件
 - 运行checker,例如升级功能
 - 创建实例：createInstance，如果需要则创建Interceptor
 - 配置依赖关系Inject:注入依赖，调用各实例的configure方法
 - 启动实例：调用各实例的start方法



###获得实例
要想获得实例，首先必须先获得ComponentLocator。有三个方法用于获得ComponentLocator：

- getLocator(String server,String configFileName,String log4jFileName);
- getLocator(String server);
- getCurrentLocator();
获得了ComponentLocator的实例之后就可以通过它获得DAO、Manager、Adapter等实例：

- T getDAO(Class<T> classz);
- T getManager(Class<T> classz);

###Add a new Manager
- realize com.cloud.utils.component.Manager
- @Local
- to get some relative class instance,such as DAO,Adapter
 + use @Inject
 + to get them in configure method like this:
 <ComponentLocator locator = ComponentLocator.getCurrentLocator();
 locator.getDao(XXXX.class);>
 - some init work was done in configure method,such as read global variable
 - start thread in start method
 - stop thread in stop method
 - configure this class in component*.xml


 ###Interceptor
 - Proxy pattern
 - use cglib library
 - ActionEventCallback
 - DatabaseCallback

 ###类命名规则
- 接口实现的后缀名Impl
- 对数据库表映射的类，后缀VO
- 为API层提供服务的类，后缀Service
- 数据访问类，后缀Dao
- API对应的实现，后缀Cmd
- 业务逻辑与Resource之间的通信，后缀Command
- 物理资源的实现，后缀Resource

###cloudstack包以及依赖关系

|| project || packge || usage||

utils                    cloud-util   工具集，可以在任何项目中使用
api                      cloud-api  REST API,Java API,Agent API
core                     cloud-core      ServerResource实现
server                   cloud-server    管理服务器
agent                    agent-agent.jar         代理容器
ovm 					 cloud-ovm.jar           Oracle VM的ServerResource实现
agent-simulator                                   agent的模拟与回归测试
vmware-bae                                        vmware的ServerResource实现

cloud-ovm:cloud-vmware-base:agent-simulator->cloud-core->cloud-api->cloud-util
cloud-server->cloud-api-cloud-util
cloud-agent->cloud-api->cloud-util

ovm,vmware-base,agent-simulator,core是所有ServerResource基于cloud-api的实现，都不会访问数据库，cloud-agent是基于cloud-api的序列化和反序列化实现，但是理想情况下，cloud-agent仅 仅作为容器并且应当基于cloud-util


cloudStack API:
cloud-api:
cloud-plugin-api:
cloud-agent-api:
